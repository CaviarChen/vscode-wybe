{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Wybe",
	"patterns": [
		{
			"include": "#general"
		},
		{
			"include": "#string"
		}
	],
	"repository": {
		"general": {
			"patterns": [
				{
					"match": "\\b(representation\\s+is)\\s+(address|((128|64|32|16)\\s+)?float|(([1-9][0-9_]*|0)\\s+bit\\s+)?(un)?signed)\\b",
					"captures": {
						"1": {
							"name": "storage.other.representation.wybe"
						},
						"2": {
							"name": "keyword.other.typerepresentation.wybe"
						}
					}
				},
				{
					"match": "\\b(type)\\s+([_a-zA-Z]\\w*)(\\s+is\\s+(address|((128|64|32|16)\\s+)?float|(([1-9][0-9_]*|0)\\s+bit\\s+)?(un)?signed))?",
					"captures": {
						"1": {
							"name": "storage.other.typedef.wybe"
						},
						"2": {
							"name": "entity.name.type.wybe"
						},
						"3": {
							"name": "storage.other.is.wybe"
						},
						"4": {
							"name": "storage.type.wybe"
						}
					}
				},
				{
					"name": "keyword.control.wybe",
					"match": "\\b(if|else|import|while|do|for|in|until|break|next|when|otherwise|unless|where|foreign(?:\\s+(?:lpvm|c|llvm|library))?)\\b"
				},
				{
					"begin": "\\b(def)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.function.wybe"
						}
					},
					"patterns": [
						{
							"begin": "\\{\\s*(test|partial|terminal|failing|(im|semi)?pure|(no)?inline)\\s*",
							"beginCaptures": {
								"1": {
									"name": "keyword.other.wybe"
								}
							},
							"patterns": [
								{
									"match": ",\\s*(test|partial|terminal|failing|(im|semi)?pure|(no)?inline)\\s*",
									"captures": {
										"1": {
											"name": "keyword.other.wybe"
										}
									}
								},
								{
									"match": ".",
									"name": "invalid"
								}
							],
							"end": "\\}"
						},
						{
							"match": "\\s+"
						},
						{
							"match": ".",
							"name": "invalid.illegal"
						}
					],
					"end": "(?:([_a-zA-Z]\\w*|~|-|`\\[\\|\\]`|`[@$%^~&|+*/=<>\\\\,;.:-]+`)|\\(\\s*[\\?!]?[_a-zA-Z]\\w*(?:\\s*:\\s*(\\??[_a-zA-Z](?:\\.?[_a-zA-Z]\\w*)*))?\\s*([@$%^~&|+*/=<>\\\\,;.:-]+)\\s*[\\?!]?[_a-zA-Z]\\w*(?:\\s*:\\s*(\\??[_a-zA-Z](?:\\.?[_a-zA-Z]\\w*)*))?\\))",
					"endCaptures": {
						"1": {
							"name": "entity.name.function.wybe"
						},
						"2": {
							"name": "entity.name.type.wybe"
						},
						"3": {
							"name": "entity.name.function.wybe"
						},
						"4": {
							"name": "entity.name.type.wybe"
						}
					}
			  },
				{
					"match": "\\b[_a-zA-Z]\\w*(?::!([_a-zA-Z](?:\\.?[_a-zA-Z]\\w*)*))?:(\\??[_a-zA-Z](\\.?[_a-zA-Z]\\w*)*)",
					"captures": {
						"1": {
							"name": "entity.name.type.wybe"
						},
						"2": {
							"name": "entity.name.type.wybe"
						}
					}
				},
				{
					"match": ":(?:!?\\s*|\\s*\\?)([_a-zA-Z]*)",
					"captures": {
						"1": {
							"name": "entity.name.type.wybe"
						}
					}
				},
				{
					"name": "storage.modifier.wybe",
					"match": "\\b(pub|use|pragma|constructors?)\\b"
				},
				{
					"name": "comment.line.number-sign.wybe",
					"match": "#(?!\\|).*$\\n?"
				},
				{
					"name": "comment.block.wybe",
					"begin": "#\\|",
					"end": "\\|#"
				},
				{
					"name": "constant.character.wybe",
					"match": "'(\\\\.|[^\\\\])'"
				},
				{
					"name": "constant.numeric.float.wybe",
					"match": "\\b(?i:(\\d+\\.\\d*(e[\\-\\+]?\\d+)?))"
				},
				{
					"name": "constant.numeric.integer.hexadecimal.wybe",
					"match": "\\b(?i:0x[\\h_]+)"
				},
				{
					"name": "constant.numeric.integer.octal.wybe",
					"match": "\\b((0[0-7_]+))"
				},
				{
					"name": "constant.numeric.integer.decimal.wybe",
					"match": "\\b([1-9][0-9_]*|0)"
				},
				{
					"name": "constant.language.bool.wybe",
					"match": "\\b(true|false)\\b"
				},
				{
					"name": "keyword.operator.output.wybe",
					"match": "\\?"
				},
				{
					"name": "keyword.operator.input-output.wybe",
					"match": "!"
				},
				{
					"name": "keyword.operator.foreign-cast.wybe",
					"match": ":!"
				},
				{
					"name": "keyword.operator.test-colons.wybe",
					"match": "::"
				}
			]
		},
		"string": {
			"name": "string.quoted.double.wybe",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.wybe",
					"match": "\\."
				}
			]
		}
	},
	"scopeName": "source.wybe"
}
